%{

open Syntax

let createTypeVar str =
    match str with
    | "Bool" -> PTyBool
    | _ -> failwithf "unsupported type: %s" str

let rec genAppTerm (ls: (Context -> Term) list) (ctx: Context) =
    let t = ls.Head ctx
    List.fold (fun t1 t2f ->
            let t2 = t2f ctx
            TmApp (Info.combine (Term.info t1) (Term.info t2), t1, t2)
        ) t ls.Tail

%}

%token EOF



%token <Info * string> UCID
%token <Info * string> LCID
%token <Info> LIN UN TRUE FALSE LET IN IF THEN ELSE
%token <Info> LAMBDA SEMICOLON DOT AT ARROW STAR LPAREN RPAREN COMMA EQUAL LESS GREATER

%right ARROW
%left STAR

%start start
%type <Term> start

%%

start
    : term { $1 [] }

qualifier
    : UN { ($1, Un) }
    | LIN { ($1, Lin) }
    
preType
    : LPAREN preType RPAREN { $2 }
    | UCID { createTypeVar (snd $1) }
    | type ARROW type { PTyArr ($1, $3) }
    | type STAR type { PTyPair ($1, $3) }

type
    : LPAREN type RPAREN    { $2 }
    | qualifier preType     { (snd $1, $2) }
    | preType               { (Un, $1) }

boolValue
    : TRUE { ($1, true) }
    | FALSE { ($1, false) }

boolTerm
    : boolValue { fun ctx -> TmBool (fst $1, Un, snd $1) }
    | qualifier boolValue { fun ctx -> TmBool (Info.combine (fst $1) (fst $2), snd $1, snd $2) }

lambdaValue
    : LAMBDA LCID SEMICOLON type DOT term { fun q -> fun ctx ->
            let x = snd $2
            let ctx' = Context.addName x ctx
            let ty = $4
            let t = $6 ctx'
            (Info.combine $1 (Term.info t), q, x, ty, t)
        }

lambdaTerm
    : lambdaValue { fun ctx -> TmAbs ($1 Un ctx) }
    | qualifier lambdaValue { fun ctx ->
            let (fi, q, x, ty, t) = $2 (snd $1) ctx
            TmAbs (Info.combine (fst $1) fi, q, x, ty, t)
        }

pairValue
    : LESS term COMMA term GREATER { fun q -> fun ctx ->
            let fi = Info.combine $1 $5
            (fi, q, $2 ctx, $4 ctx)
        }

pairTerm
    : pairValue { fun ctx -> TmPair ($1 Un ctx) }
    | qualifier pairValue { fun ctx ->
            let (fi, q, t1, t2) = $2 (snd $1) ctx
            TmPair (Info.combine (fst $1) fi, q, t1, t2)
        }


atomicTerm
    : LPAREN term RPAREN { $2 }
    | boolTerm   { $1 }
    | lambdaTerm { $1 }
    | pairTerm   { $1 }
    | IF term THEN term ELSE term { fun ctx ->
            let (t1, t2, t3) = ($2 ctx, $4 ctx, $6 ctx)
            TmIfElse (Info.combine $1 (Term.info t3), t1, t2, t3)
        }
    | LET LPAREN LCID COMMA LCID RPAREN EQUAL term IN term { fun ctx ->
            let (x, y) = snd $3, snd $5
            let ctx' = ctx |> Context.addName x |> Context.addName y
            TmSplit ($1, $8 ctx, x, y, $10 ctx')
        }
    | LCID { fun ctx -> TmVar (fst $1, Context.name2index (fst $1) (snd $1) ctx, Context.len ctx) }

appTerm
    : atomicTerm appTerm { $1 :: $2 }
    | atomicTerm { [$1] }

term
    : appTerm { genAppTerm $1 }
    
    