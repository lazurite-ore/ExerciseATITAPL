{
open FSharp.Text.Lexing
open Syntax
open Parser

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf

let createID fi (str : string) =
    let c = str.[0]
    if c >= 'A' && c <= 'Z' then
        UCID (fi, str)
    else
        LCID (fi, str)

let info (lexbuf : LexBuffer<char>) =
    Some { Start = lexbuf.StartPos; End = lexbuf.EndPos }

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule token = parse
| whitespace     { token lexbuf }
| newline        { token lexbuf }
| "λ"            { LAMBDA (info lexbuf) }
| "∀"           { FORALL (info lexbuf) }
| "("            { LPAREN (info lexbuf) }
| ")"            { RPAREN (info lexbuf) }
| ":"            { SEMICOLON (info lexbuf) }
| "::"           { SEMICOLON2 (info lexbuf) }
| "{"            { LCURLY (info lexbuf) }
| "}"            { RCURLY (info lexbuf) }
| "×"            { MUL (info lexbuf) }
| "→"            { ARROW (info lexbuf) }
| "⇒"           { DARROW (info lexbuf) }
| "."            { DOT (info lexbuf) }
| "*"            { STAR (info lexbuf) }
| "["            { LSQUARE (info lexbuf) }
| "]"            { RSQUARE (info lexbuf) }
| ","            { COMMA (info lexbuf) }
| "1"            { ONE (info lexbuf) }
| "2"            { TWO (info lexbuf) }
| "="            { EQUAL (info lexbuf) }
| "let"          { LET (info lexbuf) }
| "in"           { IN (info lexbuf) }
//| "@"            { AT (info lexbuf) }
//| "->"           { ARROW (info lexbuf) }
//| "true"         { TRUE (info lexbuf) }
//| "false"        { FALSE (info lexbuf) }
//| "if"           { IF (info lexbuf) }
//| "then"         { THEN (info lexbuf) }
//| "else"         { ELSE (info lexbuf) }
//| "<"            { LESS (info lexbuf) }
//| ">"            { GREATER (info lexbuf) }
| eof            { EOF }
| ['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '_' '0'-'9' '\'']* 
                 { createID (info lexbuf) (lexeme lexbuf) }
| _         { failwithf "LexingError in reading '%s'" (lexeme lexbuf) }


{}