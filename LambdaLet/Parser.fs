// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Syntax

type Start = Context -> Term
type Start1 = Context -> Type


let rec genAppType (ls: (Context -> Type) list) (ctx: Context) =
    let t = ls.Head ctx
    List.fold (fun t1 t2f ->
            let t2 = t2f ctx
            TyApp (Info.con (Type.info t1) (Type.info t2), t1, t2)
        ) t ls.Tail

type AppArg =
    | ATmArg of (Context -> Term)
    | ATyArg of (Context -> Type)

let createTypeVar (fi, str) (ctx: Context) =
    match str with
    //| "Unit" -> TyUnit fi
    | x -> TyVar (fi, Context.name2index fi x ctx, ctx.Length)

let rec genAppTerm (ls: AppArg list) (ctx: Context) =
    let t =
        match ls.Head with
        | ATmArg s -> s ctx
        | ATyArg s -> error (Type.info (s ctx)) "unexpected term"

    List.fold (fun t1 f ->
            match f with
            | ATmArg t2f ->
                let t2 = t2f ctx
                TmApp (Info.con (Term.info t1) (Term.info t2), t1, t2)
            | ATyArg tyf ->
                let ty = tyf ctx
                TmTApp (Info.con (Term.info t1) (Type.info ty), t1, ty)
        ) t ls.Tail




# 50 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ONE of (Info)
  | TWO of (Info)
  | LSQUARE of (Info)
  | RSQUARE of (Info)
  | COMMA of (Info)
  | EQUAL of (Info)
  | LPAREN of (Info)
  | RPAREN of (Info)
  | SEMICOLON of (Info)
  | SEMICOLON2 of (Info)
  | LCURLY of (Info)
  | RCURLY of (Info)
  | MUL of (Info)
  | ARROW of (Info)
  | DARROW of (Info)
  | DOT of (Info)
  | STAR of (Info)
  | LAMBDA of (Info)
  | FORALL of (Info)
  | LET of (Info)
  | IN of (Info)
  | LCID of (Info * string)
  | UCID of (Info * string)
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ONE
    | TOKEN_TWO
    | TOKEN_LSQUARE
    | TOKEN_RSQUARE
    | TOKEN_COMMA
    | TOKEN_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_SEMICOLON
    | TOKEN_SEMICOLON2
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_MUL
    | TOKEN_ARROW
    | TOKEN_DARROW
    | TOKEN_DOT
    | TOKEN_STAR
    | TOKEN_LAMBDA
    | TOKEN_FORALL
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_LCID
    | TOKEN_UCID
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_kind
    | NONTERM_atomicType
    | NONTERM_appType
    | NONTERM_type
    | NONTERM_absTerm
    | NONTERM_typeAbsTerm
    | NONTERM_atomicTerm
    | NONTERM_projTerm
    | NONTERM_appTerm
    | NONTERM_term
    | NONTERM_start

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ONE _ -> 0 
  | TWO _ -> 1 
  | LSQUARE _ -> 2 
  | RSQUARE _ -> 3 
  | COMMA _ -> 4 
  | EQUAL _ -> 5 
  | LPAREN _ -> 6 
  | RPAREN _ -> 7 
  | SEMICOLON _ -> 8 
  | SEMICOLON2 _ -> 9 
  | LCURLY _ -> 10 
  | RCURLY _ -> 11 
  | MUL _ -> 12 
  | ARROW _ -> 13 
  | DARROW _ -> 14 
  | DOT _ -> 15 
  | STAR _ -> 16 
  | LAMBDA _ -> 17 
  | FORALL _ -> 18 
  | LET _ -> 19 
  | IN _ -> 20 
  | LCID _ -> 21 
  | UCID _ -> 22 
  | EOF  -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ONE 
  | 1 -> TOKEN_TWO 
  | 2 -> TOKEN_LSQUARE 
  | 3 -> TOKEN_RSQUARE 
  | 4 -> TOKEN_COMMA 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_SEMICOLON2 
  | 10 -> TOKEN_LCURLY 
  | 11 -> TOKEN_RCURLY 
  | 12 -> TOKEN_MUL 
  | 13 -> TOKEN_ARROW 
  | 14 -> TOKEN_DARROW 
  | 15 -> TOKEN_DOT 
  | 16 -> TOKEN_STAR 
  | 17 -> TOKEN_LAMBDA 
  | 18 -> TOKEN_FORALL 
  | 19 -> TOKEN_LET 
  | 20 -> TOKEN_IN 
  | 21 -> TOKEN_LCID 
  | 22 -> TOKEN_UCID 
  | 23 -> TOKEN_EOF 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_kind 
    | 2 -> NONTERM_kind 
    | 3 -> NONTERM_kind 
    | 4 -> NONTERM_atomicType 
    | 5 -> NONTERM_atomicType 
    | 6 -> NONTERM_atomicType 
    | 7 -> NONTERM_atomicType 
    | 8 -> NONTERM_atomicType 
    | 9 -> NONTERM_atomicType 
    | 10 -> NONTERM_atomicType 
    | 11 -> NONTERM_atomicType 
    | 12 -> NONTERM_appType 
    | 13 -> NONTERM_appType 
    | 14 -> NONTERM_type 
    | 15 -> NONTERM_absTerm 
    | 16 -> NONTERM_typeAbsTerm 
    | 17 -> NONTERM_typeAbsTerm 
    | 18 -> NONTERM_atomicTerm 
    | 19 -> NONTERM_atomicTerm 
    | 20 -> NONTERM_atomicTerm 
    | 21 -> NONTERM_atomicTerm 
    | 22 -> NONTERM_atomicTerm 
    | 23 -> NONTERM_atomicTerm 
    | 24 -> NONTERM_projTerm 
    | 25 -> NONTERM_projTerm 
    | 26 -> NONTERM_projTerm 
    | 27 -> NONTERM_appTerm 
    | 28 -> NONTERM_appTerm 
    | 29 -> NONTERM_appTerm 
    | 30 -> NONTERM_appTerm 
    | 31 -> NONTERM_term 
    | 32 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ONE _ -> "ONE" 
  | TWO _ -> "TWO" 
  | LSQUARE _ -> "LSQUARE" 
  | RSQUARE _ -> "RSQUARE" 
  | COMMA _ -> "COMMA" 
  | EQUAL _ -> "EQUAL" 
  | LPAREN _ -> "LPAREN" 
  | RPAREN _ -> "RPAREN" 
  | SEMICOLON _ -> "SEMICOLON" 
  | SEMICOLON2 _ -> "SEMICOLON2" 
  | LCURLY _ -> "LCURLY" 
  | RCURLY _ -> "RCURLY" 
  | MUL _ -> "MUL" 
  | ARROW _ -> "ARROW" 
  | DARROW _ -> "DARROW" 
  | DOT _ -> "DOT" 
  | STAR _ -> "STAR" 
  | LAMBDA _ -> "LAMBDA" 
  | FORALL _ -> "FORALL" 
  | LET _ -> "LET" 
  | IN _ -> "IN" 
  | LCID _ -> "LCID" 
  | UCID _ -> "UCID" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ONE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TWO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LSQUARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RSQUARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON2 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MUL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LAMBDA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FORALL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UCID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;5us;65535us;2us;3us;10us;6us;30us;7us;35us;8us;48us;9us;11us;65535us;11us;37us;25us;37us;26us;37us;29us;37us;31us;37us;34us;37us;36us;37us;37us;37us;42us;37us;64us;37us;73us;37us;11us;65535us;11us;39us;25us;39us;26us;39us;29us;39us;31us;39us;34us;39us;36us;39us;37us;38us;42us;39us;64us;39us;73us;39us;11us;65535us;11us;12us;25us;15us;26us;17us;29us;18us;31us;19us;34us;20us;36us;21us;37us;16us;42us;22us;64us;23us;73us;24us;10us;65535us;0us;55us;43us;55us;46us;55us;49us;55us;51us;55us;57us;55us;59us;55us;65us;55us;68us;55us;74us;55us;10us;65535us;0us;56us;43us;56us;46us;56us;49us;56us;51us;56us;57us;56us;59us;56us;65us;56us;68us;56us;74us;56us;10us;65535us;0us;67us;43us;67us;46us;67us;49us;67us;51us;67us;57us;67us;59us;67us;65us;67us;68us;67us;74us;67us;10us;65535us;0us;68us;43us;68us;46us;68us;49us;68us;51us;68us;57us;68us;59us;68us;65us;68us;68us;68us;74us;68us;10us;65535us;0us;76us;43us;76us;46us;76us;49us;76us;51us;76us;57us;76us;59us;76us;65us;76us;68us;72us;74us;75us;8us;65535us;0us;77us;43us;44us;46us;47us;49us;50us;51us;52us;57us;58us;59us;60us;65us;66us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;7us;19us;31us;43us;54us;65us;76us;87us;98us;107us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;1us;3us;1us;1us;1us;2us;2us;3us;3us;2us;3us;9us;2us;3us;11us;2us;3us;17us;1us;3us;1us;4us;3us;4us;6us;7us;1us;4us;1us;5us;3us;6us;6us;7us;2us;6us;7us;3us;6us;7us;7us;3us;6us;7us;8us;3us;6us;7us;9us;3us;6us;7us;10us;3us;6us;7us;11us;3us;6us;7us;15us;3us;6us;7us;23us;4us;6us;7us;28us;30us;1us;6us;1us;7us;2us;8us;9us;2us;8us;9us;1us;8us;1us;9us;1us;9us;2us;10us;11us;2us;10us;11us;1us;10us;1us;11us;1us;11us;2us;12us;13us;2us;12us;14us;1us;14us;3us;15us;16us;17us;1us;15us;1us;15us;1us;15us;1us;15us;2us;16us;17us;1us;16us;1us;16us;1us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;22us;1us;22us;1us;22us;1us;22us;1us;23us;1us;23us;1us;23us;1us;23us;1us;23us;1us;24us;4us;25us;26us;27us;29us;2us;25us;26us;1us;25us;1us;26us;1us;27us;2us;28us;30us;2us;28us;30us;1us;28us;1us;31us;1us;32us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;16us;19us;22us;25us;27us;29us;33us;35us;37us;41us;44us;48us;52us;56us;60us;64us;68us;72us;77us;79us;81us;84us;87us;89us;91us;93us;96us;99us;101us;103us;105us;108us;111us;113us;117us;119us;121us;123us;125us;128us;130us;132us;134us;136us;138us;140us;142us;144us;146us;148us;150us;152us;154us;156us;158us;160us;162us;164us;166us;168us;170us;172us;177us;180us;182us;184us;186us;189us;192us;194us;196us;|]
let _fsyacc_action_rows = 78
let _fsyacc_actionTableElements = [|6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;0us;49152us;2us;32768us;6us;2us;16us;5us;2us;32768us;7us;4us;14us;10us;0us;16385us;0us;16386us;1us;16387us;14us;10us;2us;32768us;14us;10us;15us;31us;2us;32768us;14us;10us;15us;36us;2us;32768us;14us;10us;15us;49us;2us;32768us;6us;2us;16us;5us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;3us;32768us;7us;13us;12us;26us;13us;25us;0us;16388us;0us;16389us;2us;16390us;12us;26us;13us;25us;2us;32768us;12us;26us;13us;25us;2us;16391us;12us;26us;13us;25us;2us;16392us;12us;26us;13us;25us;2us;16393us;12us;26us;13us;25us;2us;16394us;12us;26us;13us;25us;2us;16395us;12us;26us;13us;25us;3us;32768us;12us;26us;13us;25us;15us;43us;3us;32768us;12us;26us;13us;25us;20us;65us;3us;32768us;3us;74us;12us;26us;13us;25us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;1us;32768us;22us;28us;2us;32768us;9us;30us;15us;29us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;2us;32768us;6us;2us;16us;5us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;1us;32768us;22us;33us;2us;32768us;9us;35us;15us;34us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;2us;32768us;6us;2us;16us;5us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;4us;16397us;6us;11us;17us;32us;18us;27us;22us;14us;0us;16396us;0us;16398us;2us;32768us;21us;41us;22us;45us;1us;32768us;8us;42us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;0us;16399us;2us;32768us;9us;48us;15us;46us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;0us;16400us;2us;32768us;6us;2us;16us;5us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;0us;16401us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;1us;32768us;7us;53us;0us;16402us;0us;16403us;0us;16404us;0us;16405us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;1us;32768us;4us;59us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;1us;32768us;11us;61us;0us;16406us;1us;32768us;22us;63us;1us;32768us;5us;64us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;6us;32768us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;0us;16407us;0us;16408us;7us;16413us;2us;73us;6us;51us;10us;57us;15us;69us;17us;40us;19us;62us;21us;54us;2us;32768us;0us;70us;1us;71us;0us;16409us;0us;16410us;0us;16411us;4us;32768us;6us;11us;17us;32us;18us;27us;22us;14us;6us;16414us;2us;73us;6us;51us;10us;57us;17us;40us;19us;62us;21us;54us;0us;16412us;0us;16415us;0us;16416us;|]
let _fsyacc_actionTableRowOffsets = [|0us;7us;8us;11us;14us;15us;16us;18us;21us;24us;27us;30us;35us;39us;40us;41us;44us;47us;50us;53us;56us;59us;62us;66us;70us;74us;79us;84us;86us;89us;94us;97us;102us;104us;107us;112us;115us;120us;125us;126us;127us;130us;132us;137us;144us;145us;148us;155us;156us;159us;166us;167us;174us;176us;177us;178us;179us;180us;187us;189us;196us;198us;199us;201us;203us;208us;215us;216us;217us;225us;228us;229us;230us;231us;236us;243us;244us;245us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;1us;3us;3us;1us;3us;3us;4us;6us;4us;6us;2us;1us;1us;6us;4us;6us;3us;1us;1us;1us;5us;6us;1us;3us;3us;2us;4us;1us;3us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;5us;6us;6us;7us;7us;7us;7us;7us;7us;8us;8us;8us;9us;9us;9us;9us;10us;11us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16388us;16389us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16398us;65535us;65535us;65535us;65535us;16399us;65535us;65535us;16400us;65535us;65535us;16401us;65535us;65535us;16402us;16403us;16404us;16405us;65535us;65535us;65535us;65535us;16406us;65535us;65535us;65535us;65535us;16407us;16408us;65535us;65535us;16409us;16410us;16411us;65535us;65535us;16412us;16415us;16416us;|]
let _fsyacc_reductions = lazy [|
# 286 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Start in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 295 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_kind in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                _2 
                   )
# 60 "Parser.fsy"
                 : 'gentype_kind));
# 308 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                  KdStar _1 
                   )
# 61 "Parser.fsy"
                 : 'gentype_kind));
# 319 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_kind in
            let _2 = parseState.GetInput(2) :?> Info in
            let _3 = parseState.GetInput(3) :?> 'gentype_kind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                             
                                 let (k1, k2) = _1, _3
                                 KdOp (Info.con (Kind.info k1) (Kind.info k2), k1, k2)
                             
                   )
# 62 "Parser.fsy"
                 : 'gentype_kind));
# 335 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_type in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                _2 
                   )
# 68 "Parser.fsy"
                 : 'gentype_atomicType));
# 348 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                  fun ctx ->
                                 let (fi, tyX) = _1
                                 TyVar (fi, Context.name2index fi tyX ctx, ctx.Length)
                             
                   )
# 69 "Parser.fsy"
                 : 'gentype_atomicType));
# 362 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_type in
            let _2 = parseState.GetInput(2) :?> Info in
            let _3 = parseState.GetInput(3) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                             fun ctx ->
                                 let (ty1, ty2) = _1 ctx, _3 ctx
                                 TyFun (Info.con (Type.info ty1) (Type.info ty2), ty1, ty2)
                             
                   )
# 73 "Parser.fsy"
                 : 'gentype_atomicType));
# 378 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_type in
            let _2 = parseState.GetInput(2) :?> Info in
            let _3 = parseState.GetInput(3) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                           fun ctx ->
                                 let (ty1, ty2) = _1 ctx, _3 ctx
                                 TyPair (Info.con (Type.info ty1) (Type.info ty2), ty1, ty2)
                             
                   )
# 77 "Parser.fsy"
                 : 'gentype_atomicType));
# 394 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                  fun ctx ->
                                 let tyX = snd _2
                                 let ctx' = Context.addName tyX ctx
                                 let ty = _4 ctx'
                                 TyAll (Info.con _1 (Type.info ty), tyX, KdStar None, ty)
                             
                   )
# 81 "Parser.fsy"
                 : 'gentype_atomicType));
# 413 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_kind in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                  fun ctx ->
                                 let tyX = snd _2
                                 let k = _4
                                 let ctx' = Context.addName tyX ctx
                                 let ty = _6 ctx'
                                 TyAll (Info.con _1 (Type.info ty), tyX, k, ty)
                             
                   )
# 87 "Parser.fsy"
                 : 'gentype_atomicType));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                  fun ctx ->
                                 let tyX = snd _2
                                 let ctx' = Context.addName tyX ctx
                                 let ty = _4 ctx'
                                 TyAbs (Info.con _1 (Type.info ty), tyX, KdStar None, ty)
                             
                   )
# 94 "Parser.fsy"
                 : 'gentype_atomicType));
# 454 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_kind in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                                  fun ctx ->
                                 let tyX = snd _2
                                 let k = _4
                                 let ctx' = Context.addName tyX ctx
                                 let ty = _6 ctx'
                                 TyAbs (Info.con _1 (Type.info ty), tyX, k, ty)
                             
                   )
# 100 "Parser.fsy"
                 : 'gentype_atomicType));
# 476 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicType in
            let _2 = parseState.GetInput(2) :?> 'gentype_appType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                _1 :: _2 
                   )
# 110 "Parser.fsy"
                 : 'gentype_appType));
# 488 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                        [_1] 
                   )
# 111 "Parser.fsy"
                 : 'gentype_appType));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_appType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                     fun ctx -> genAppType _1 ctx 
                   )
# 114 "Parser.fsy"
                 : 'gentype_type));
# 510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                 fun ctx ->
                                 let x = snd _2
                                 let ty = _4 ctx
                                 let ctx' = Context.addName x ctx
                                 let t = _6 ctx'
                                 TmAbs (Info.con _1 (Term.info t), x, ty, t)
                             
                   )
# 117 "Parser.fsy"
                 : 'gentype_absTerm));
# 532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                  fun ctx ->
                                 let tyX = snd _2
                                 let k = KdStar None
                                 let ctx' = Context.addName tyX ctx
                                 let t = _4 ctx'
                                 TmTAbs (Info.con _1 (Term.info t), tyX, k, t)
                             
                   )
# 126 "Parser.fsy"
                 : 'gentype_typeAbsTerm));
# 552 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_kind in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                  fun ctx ->
                                 let tyX = snd _2
                                 let k = _4
                                 let ctx' = Context.addName tyX ctx
                                 let t = _6 ctx'
                                 TmTAbs (Info.con _1 (Term.info t), tyX, k, t)
                             
                   )
# 133 "Parser.fsy"
                 : 'gentype_typeAbsTerm));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                _2 
                   )
# 142 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 587 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                  fun ctx -> TmVar (fst _1, Context.name2index (fst _1) (snd _1) ctx, Context.len ctx) 
                   )
# 143 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 598 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_absTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                     _1 
                   )
# 144 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 609 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_typeAbsTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                         _1 
                   )
# 145 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 620 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_term in
            let _5 = parseState.GetInput(5) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                           fun ctx ->
                                 let t1 = _2 ctx
                                 let t2 = _4 ctx
                                 TmPair (Info.con (Term.info t1) (Term.info t2), t1, t2)
                             
                   )
# 146 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                         fun ctx ->
                                 let tyX = snd _2
                                 let ty = _4 ctx
                                 let ctx' = Context.addName tyX ctx
                                 let t = _6 ctx'
                                 TmTDef (Info.con _1 (Term.info t), tyX, ty, t)
                             
                   )
# 151 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 661 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                        _1 
                   )
# 160 "Parser.fsy"
                 : 'gentype_projTerm));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_projTerm in
            let _2 = parseState.GetInput(2) :?> Info in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                              fun ctx -> let t = _1 ctx in TmFst (Info.con (Term.info t) _3, t) 
                   )
# 161 "Parser.fsy"
                 : 'gentype_projTerm));
# 685 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_projTerm in
            let _2 = parseState.GetInput(2) :?> Info in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                              fun ctx -> let t = _1 ctx in TmSnd (Info.con (Term.info t) _3, t) 
                   )
# 162 "Parser.fsy"
                 : 'gentype_projTerm));
# 698 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_projTerm in
            let _2 = parseState.GetInput(2) :?> 'gentype_appTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                              ATmArg _1 :: _2 
                   )
# 165 "Parser.fsy"
                 : 'gentype_appTerm));
# 710 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_type in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_appTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                          ATyArg _2 :: _4 
                   )
# 166 "Parser.fsy"
                 : 'gentype_appTerm));
# 724 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_projTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                      [ATmArg _1] 
                   )
# 167 "Parser.fsy"
                 : 'gentype_appTerm));
# 735 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_type in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                  [ATyArg _2] 
                   )
# 168 "Parser.fsy"
                 : 'gentype_appTerm));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_appTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                     genAppTerm _1 
                   )
# 171 "Parser.fsy"
                 : 'gentype_term));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                  _1 
                   )
# 174 "Parser.fsy"
                 : Start));
|]
# 771 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Start =
    engine lexer lexbuf 0 :?> _
