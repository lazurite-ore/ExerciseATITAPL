// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Syntax

type Start = Context -> Term

let createTypeVar (fi, str) (ctx: Context) =
    match str with
    | "Unit" -> TyUnit fi
    | x -> TyVar (fi, Context.name2index fi x ctx, ctx.Length)

let rec genAppTerm (ls: (Context -> Term) list) (ctx: Context) =
    let t = ls.Head ctx
    List.fold (fun t1 t2f ->
            let t2 = t2f ctx
            TmApp (conInfo (tmInfo t1) (tmInfo t2), t1, t2)
        ) t ls.Tail


# 26 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LAMBDA of (Info)
  | SEMICOLON of (Info)
  | DOT of (Info)
  | AT of (Info)
  | ARROW of (Info)
  | STAR of (Info)
  | LPAREN of (Info)
  | RPAREN of (Info)
  | COMMA of (Info)
  | EQUAL of (Info)
  | LESS of (Info)
  | GREATER of (Info)
  | PIPEPIPE of (Info)
  | LIN of (Info)
  | UN of (Info)
  | TRUE of (Info)
  | FALSE of (Info)
  | LET of (Info)
  | IN of (Info)
  | IF of (Info)
  | THEN of (Info)
  | ELSE of (Info)
  | TYPE of (Info)
  | LCID of (Info * string)
  | UCID of (Info * string)
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LAMBDA
    | TOKEN_SEMICOLON
    | TOKEN_DOT
    | TOKEN_AT
    | TOKEN_ARROW
    | TOKEN_STAR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_COMMA
    | TOKEN_EQUAL
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_PIPEPIPE
    | TOKEN_LIN
    | TOKEN_UN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_TYPE
    | TOKEN_LCID
    | TOKEN_UCID
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_kind
    | NONTERM_atomicType
    | NONTERM_type
    | NONTERM_lambdaTerm
    | NONTERM_atomicTerm
    | NONTERM_appTerm
    | NONTERM_term

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LAMBDA _ -> 0 
  | SEMICOLON _ -> 1 
  | DOT _ -> 2 
  | AT _ -> 3 
  | ARROW _ -> 4 
  | STAR _ -> 5 
  | LPAREN _ -> 6 
  | RPAREN _ -> 7 
  | COMMA _ -> 8 
  | EQUAL _ -> 9 
  | LESS _ -> 10 
  | GREATER _ -> 11 
  | PIPEPIPE _ -> 12 
  | LIN _ -> 13 
  | UN _ -> 14 
  | TRUE _ -> 15 
  | FALSE _ -> 16 
  | LET _ -> 17 
  | IN _ -> 18 
  | IF _ -> 19 
  | THEN _ -> 20 
  | ELSE _ -> 21 
  | TYPE _ -> 22 
  | LCID _ -> 23 
  | UCID _ -> 24 
  | EOF  -> 25 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LAMBDA 
  | 1 -> TOKEN_SEMICOLON 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_AT 
  | 4 -> TOKEN_ARROW 
  | 5 -> TOKEN_STAR 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_EQUAL 
  | 10 -> TOKEN_LESS 
  | 11 -> TOKEN_GREATER 
  | 12 -> TOKEN_PIPEPIPE 
  | 13 -> TOKEN_LIN 
  | 14 -> TOKEN_UN 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_LET 
  | 18 -> TOKEN_IN 
  | 19 -> TOKEN_IF 
  | 20 -> TOKEN_THEN 
  | 21 -> TOKEN_ELSE 
  | 22 -> TOKEN_TYPE 
  | 23 -> TOKEN_LCID 
  | 24 -> TOKEN_UCID 
  | 25 -> TOKEN_EOF 
  | 28 -> TOKEN_end_of_input
  | 26 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_kind 
    | 3 -> NONTERM_kind 
    | 4 -> NONTERM_atomicType 
    | 5 -> NONTERM_atomicType 
    | 6 -> NONTERM_atomicType 
    | 7 -> NONTERM_type 
    | 8 -> NONTERM_type 
    | 9 -> NONTERM_lambdaTerm 
    | 10 -> NONTERM_atomicTerm 
    | 11 -> NONTERM_atomicTerm 
    | 12 -> NONTERM_atomicTerm 
    | 13 -> NONTERM_atomicTerm 
    | 14 -> NONTERM_atomicTerm 
    | 15 -> NONTERM_appTerm 
    | 16 -> NONTERM_appTerm 
    | 17 -> NONTERM_term 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 28 
let _fsyacc_tagOfErrorTerminal = 26

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LAMBDA _ -> "LAMBDA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | DOT _ -> "DOT" 
  | AT _ -> "AT" 
  | ARROW _ -> "ARROW" 
  | STAR _ -> "STAR" 
  | LPAREN _ -> "LPAREN" 
  | RPAREN _ -> "RPAREN" 
  | COMMA _ -> "COMMA" 
  | EQUAL _ -> "EQUAL" 
  | LESS _ -> "LESS" 
  | GREATER _ -> "GREATER" 
  | PIPEPIPE _ -> "PIPEPIPE" 
  | LIN _ -> "LIN" 
  | UN _ -> "UN" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | LET _ -> "LET" 
  | IN _ -> "IN" 
  | IF _ -> "IF" 
  | THEN _ -> "THEN" 
  | ELSE _ -> "ELSE" 
  | TYPE _ -> "TYPE" 
  | LCID _ -> "LCID" 
  | UCID _ -> "UCID" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LAMBDA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LESS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GREATER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PIPEPIPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UCID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;0us;65535us;4us;65535us;3us;13us;9us;13us;11us;13us;17us;13us;4us;65535us;3us;4us;9us;10us;11us;12us;17us;18us;7us;65535us;0us;24us;13us;24us;19us;24us;21us;24us;29us;24us;31us;24us;33us;24us;7us;65535us;0us;33us;13us;33us;19us;33us;21us;33us;29us;33us;31us;33us;33us;33us;7us;65535us;0us;35us;13us;35us;19us;35us;21us;35us;29us;35us;31us;35us;33us;34us;6us;65535us;0us;2us;13us;14us;19us;20us;21us;22us;29us;30us;31us;32us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;4us;9us;14us;22us;30us;38us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;4us;1us;4us;1us;4us;1us;5us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;2us;7us;8us;1us;8us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;2us;10us;12us;1us;10us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;14us;1us;14us;1us;14us;1us;14us;1us;14us;2us;15us;16us;1us;15us;1us;17us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;26us;29us;31us;33us;35us;37us;39us;41us;43us;46us;48us;50us;52us;54us;56us;58us;60us;62us;64us;66us;68us;71us;73us;|]
let _fsyacc_action_rows = 36
let _fsyacc_actionTableElements = [|4us;32768us;0us;15us;6us;21us;17us;27us;23us;26us;0us;49152us;0us;16385us;3us;32768us;6us;3us;12us;7us;24us;6us;1us;32768us;7us;5us;0us;16388us;0us;16389us;1us;32768us;23us;8us;1us;32768us;1us;9us;3us;32768us;6us;3us;12us;7us;24us;6us;1us;32768us;2us;11us;3us;32768us;6us;3us;12us;7us;24us;6us;0us;16390us;4us;16391us;0us;15us;6us;21us;17us;27us;23us;26us;0us;16392us;1us;32768us;23us;16us;1us;32768us;1us;17us;3us;32768us;6us;3us;12us;7us;24us;6us;1us;32768us;2us;19us;4us;32768us;0us;15us;6us;21us;17us;27us;23us;26us;0us;16393us;5us;32768us;0us;15us;6us;21us;7us;25us;17us;27us;23us;26us;1us;32768us;7us;23us;0us;16394us;0us;16395us;0us;16396us;0us;16397us;1us;32768us;23us;28us;1us;32768us;9us;29us;4us;32768us;0us;15us;6us;21us;17us;27us;23us;26us;1us;32768us;18us;31us;4us;32768us;0us;15us;6us;21us;17us;27us;23us;26us;0us;16398us;4us;16400us;0us;15us;6us;21us;17us;27us;23us;26us;0us;16399us;0us;16401us;|]
let _fsyacc_actionTableRowOffsets = [|0us;5us;6us;7us;11us;13us;14us;15us;17us;19us;23us;25us;29us;30us;35us;36us;38us;40us;44us;46us;51us;52us;58us;60us;61us;62us;63us;64us;66us;68us;73us;75us;80us;81us;86us;87us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;6us;3us;1us;6us;1us;2us;6us;3us;1us;2us;1us;6us;2us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;3us;4us;4us;5us;6us;6us;6us;6us;6us;7us;7us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;16388us;16389us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;65535us;16394us;16395us;16396us;16397us;65535us;65535us;65535us;65535us;65535us;16398us;65535us;16399us;16401us;|]
let _fsyacc_reductions = lazy [|
# 256 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Start in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 265 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                  _1 
                   )
# 36 "Parser.fsy"
                 : Start));
# 276 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                  fun ctx -> KdStar _1 
                   )
# 39 "Parser.fsy"
                 : 'gentype_kind));
# 287 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_kind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                                   fun ctx ->
                                 let tyX = snd _2
                                 let ty = _4 ctx
                                 let ctx' = Context.addName tyX ctx
                                 let k = _6 ctx'
                                 KdPi (conInfo _1 (kdInfo k), tyX, ty, k)
                             
                   )
# 40 "Parser.fsy"
                 : 'gentype_kind));
# 309 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_type in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                fun ctx -> _2 ctx 
                   )
# 49 "Parser.fsy"
                 : 'gentype_atomicType));
# 322 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                  fun ctx -> createTypeVar _1 ctx 
                   )
# 50 "Parser.fsy"
                 : 'gentype_atomicType));
# 333 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                   fun ctx ->
                                 let x = snd _2
                                 let tyT1 = _4 ctx
                                 let ctx' = Context.addName x ctx
                                 let tyT2 = _6 ctx'
                                 TyPi (conInfo _1 (tyInfo tyT2), x, tyT1, tyT2)
                             
                   )
# 51 "Parser.fsy"
                 : 'gentype_atomicType));
# 355 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                        _1 
                   )
# 61 "Parser.fsy"
                 : 'gentype_type));
# 366 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicType in
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                             fun ctx ->
                                 let ty = _1 ctx
                                 let t = _2 ctx
                                 TyApp (conInfo (tyInfo ty) (tmInfo t), ty, t)
                             
                   )
# 62 "Parser.fsy"
                 : 'gentype_type));
# 382 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_type in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                                 fun ctx ->
                                 let x = snd _2
                                 let ty = _4 ctx
                                 let ctx' = Context.addName x ctx
                                 let t = _6 ctx'
                                 TmAbs (conInfo _1 (tmInfo t), x, ty, t)
                             
                   )
# 70 "Parser.fsy"
                 : 'gentype_lambdaTerm));
# 404 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                _2 
                   )
# 79 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 417 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_lambdaTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                        _1 
                   )
# 80 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 428 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                           fun ctx -> TmUnit (conInfo _1 _2) 
                   )
# 81 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 440 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                  fun ctx -> TmVar (fst _1, Context.name2index (fst _1) (snd _1) ctx, Context.len ctx) 
                   )
# 82 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Info in
            let _2 = parseState.GetInput(2) :?> Info * string in
            let _3 = parseState.GetInput(3) :?> Info in
            let _4 = parseState.GetInput(4) :?> 'gentype_term in
            let _5 = parseState.GetInput(5) :?> Info in
            let _6 = parseState.GetInput(6) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                         fun ctx ->
                                 let x = snd _2
                                 let t1 = _4 ctx
                                 let ctx' = Context.addName x ctx
                                 let t2 = _6 ctx'
                                 TmLet (conInfo _1 (tmInfo t2), x, t1, t2)
                             
                   )
# 83 "Parser.fsy"
                 : 'gentype_atomicTerm));
# 473 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicTerm in
            let _2 = parseState.GetInput(2) :?> 'gentype_appTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                _1 :: _2 
                   )
# 92 "Parser.fsy"
                 : 'gentype_appTerm));
# 485 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_atomicTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                        [_1] 
                   )
# 93 "Parser.fsy"
                 : 'gentype_appTerm));
# 496 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_appTerm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                     genAppTerm _1 
                   )
# 96 "Parser.fsy"
                 : 'gentype_term));
|]
# 508 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 29;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Start =
    engine lexer lexbuf 0 :?> _
